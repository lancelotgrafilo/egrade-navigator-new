import { useState } from "react";
import axios from "axios";
import Joi from "joi";

const useAdminSubmit = () => {
  const [dataAdmin, setDataAdmin] = useState({
    email: "",
    last_name: "",
    first_name: ""
  });

  // Functions to reset form fields
  const resetAdminForm = () => {
    setDataAdmin({
      email: '',
      last_name: '',
      first_name: '',
    });
  };

  const [errorAdmin, setErrorAdmin] = useState("");

  const handleChangeAdmin = (e) => {
    setDataAdmin({ ...dataAdmin, [e.target.name]: e.target.value });
  };

  const validateEmail = (email) => {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailPattern.test(email);
  };

  const handleSubmitAdmin = async () => {
    setErrorAdmin("");

    if (!validateEmail(dataAdmin.email)) {
      setErrorAdmin("Invalid email format");
      return;
    }

    const adminSchema = Joi.object({
      ID: Joi.string().default("admin-01"),
      last_name: Joi.string().required(),
      first_name: Joi.string().required(),
      email: Joi.string().email({ tlds: { allow: false } }).required(),
      isActive: Joi.boolean().default(true),
      createdAt: Joi.date().default(Date.now),
    });

    const { error: validationError } = adminSchema.validate(dataAdmin, { abortEarly: false });

    if (validationError) {
      setErrorAdmin(validationError.details.map(detail => detail.message).join(', '));
      return;
    }

    try {
      const response = await axios.post("/api/admin", {
        email: dataAdmin.email,
        last_name: dataAdmin.last_name,
        first_name: dataAdmin.first_name,
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      console.log('Response status:', response.status);
      console.log('Response data:', response.data);

      if (response.status === 201) {

        console.log("Successfully Added New Admin");

        setDataAdmin({ email: "", last_name: "", first_name: "" });
      } else {
        setErrorAdmin("Unexpected response status: " + response.status);
      }
    } catch (error) {
      console.error('Error response:', error.response);
      setErrorAdmin(error.response && error.response.data.message 
        ? error.response.data.message 
        : `Registration failed. Please try again.`);
    }
  };

  return {
    dataAdmin,
    errorAdmin,
    handleChangeAdmin,
    handleSubmitAdmin,
    resetAdminForm
  };
};

export default useAdminSubmit;
